{"ast":null,"code":"var _jsxFileName = \"/Users/bc/Documents/box/src/components/Box.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { Box as MUIBox } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Box = ({\n  isRunning,\n  duration,\n  theme,\n  startTime,\n  isReady\n}) => {\n  _s();\n  const boxRef = useRef(null);\n  const dotRef = useRef(null);\n  const phaseTextRef = useRef(null);\n  const countdownRef = useRef(null);\n  const phases = ['Exhale', 'Hold', 'Inhale', 'Hold'];\n  const points = [{\n    x: 300,\n    y: 0\n  },\n  // A: Upper right\n  {\n    x: 300,\n    y: 300\n  },\n  // B: Lower right\n  {\n    x: 0,\n    y: 300\n  },\n  // C: Lower left\n  {\n    x: 0,\n    y: 0\n  } // D: Upper left\n  ];\n  const getColors = () => {\n    switch (theme) {\n      case 'green-purple':\n        return {\n          color1: '#9C27B0',\n          color2: '#4CAF50'\n        };\n      case 'red-yellow':\n        return {\n          color1: '#F44336',\n          color2: '#FFEB3B'\n        };\n      default:\n        return {\n          color1: '#2196F3',\n          color2: '#FF9800'\n        };\n    }\n  };\n  useEffect(() => {\n    if (isReady) {\n      if (phaseTextRef.current) {\n        phaseTextRef.current.textContent = 'Ready to exhale';\n      }\n      if (boxRef.current) {\n        boxRef.current.style.borderColor = getColors().color1;\n      }\n      if (dotRef.current) {\n        dotRef.current.style.backgroundColor = getColors().color1;\n      }\n    } else if (isRunning && startTime) {\n      const animate = timestamp => {\n        const elapsedTime = timestamp - startTime;\n        const totalCycleDuration = duration * 4 * 1000;\n        const cycleTime = elapsedTime % totalCycleDuration;\n        const phaseIndex = Math.floor(cycleTime / (duration * 1000));\n        const phaseTime = cycleTime % (duration * 1000);\n\n        // Ensure phaseIndex is within bounds\n        const safePhaseIndex = phaseIndex % 4;\n\n        // Calculate position\n        const startPoint = points[safePhaseIndex];\n        const endPoint = points[(safePhaseIndex + 1) % 4];\n        if (!startPoint || !endPoint) {\n          console.error('Invalid points:', startPoint, endPoint);\n          return;\n        }\n        const progress = phaseTime / (duration * 1000);\n\n        // Apply 0.2-second pause at each point\n        const pauseDuration = 200; // 0.2 seconds in milliseconds\n        let adjustedProgress = progress;\n        if (progress < pauseDuration / (duration * 1000)) {\n          adjustedProgress = 0;\n        } else if (progress > 1 - pauseDuration / (duration * 1000)) {\n          adjustedProgress = 1;\n        } else {\n          adjustedProgress = (progress - pauseDuration / (duration * 1000)) / (1 - 2 * pauseDuration / (duration * 1000));\n        }\n        const x = startPoint.x + (endPoint.x - startPoint.x) * adjustedProgress;\n        const y = startPoint.y + (endPoint.y - startPoint.y) * adjustedProgress;\n        if (dotRef.current) {\n          dotRef.current.style.left = `${x - 13}px`;\n          dotRef.current.style.top = `${y - 13}px`;\n        }\n\n        // Box size animation\n        const originalSize = 300;\n        const minSize = originalSize * 0.75; // 25% reduction\n        let currentSize;\n        if (safePhaseIndex === 0) {\n          // Exhale\n          currentSize = originalSize - (originalSize - minSize) * adjustedProgress;\n        } else if (safePhaseIndex === 1) {\n          // Hold after Exhale\n          currentSize = minSize;\n        } else if (safePhaseIndex === 2) {\n          // Inhale\n          currentSize = minSize + (originalSize - minSize) * adjustedProgress;\n        } else {\n          // Hold after Inhale\n          currentSize = originalSize;\n        }\n        if (boxRef.current) {\n          boxRef.current.style.width = `${currentSize}px`;\n          boxRef.current.style.height = `${currentSize}px`;\n        }\n\n        // Adjust dot position based on new box size\n        const scale = currentSize / originalSize;\n        if (dotRef.current) {\n          dotRef.current.style.left = `${x * scale - 13}px`;\n          dotRef.current.style.top = `${y * scale - 13}px`;\n        }\n\n        // Color transition\n        const {\n          color1,\n          color2\n        } = getColors();\n        let color;\n        if (safePhaseIndex === 0) {\n          // Exhale: transition from color1 to color2\n          const colorProgress = adjustedProgress;\n          color = interpolateColor(color1, color2, colorProgress);\n        } else if (safePhaseIndex === 1 || safePhaseIndex === 3) {\n          // Hold phases: use color2 (calm color)\n          color = color2;\n        } else if (safePhaseIndex === 2) {\n          // Inhale: transition from color2 to color1\n          const colorProgress = adjustedProgress;\n          color = interpolateColor(color2, color1, colorProgress);\n        }\n        if (boxRef.current) {\n          boxRef.current.style.borderColor = color;\n        }\n        if (dotRef.current) {\n          dotRef.current.style.backgroundColor = color;\n        }\n        if (phaseTextRef.current) {\n          phaseTextRef.current.style.color = color;\n        }\n\n        // Update phase text\n        if (phaseTextRef.current) {\n          phaseTextRef.current.textContent = phases[safePhaseIndex];\n        }\n\n        // Update countdown\n        if (countdownRef.current) {\n          const countdown = Math.max(0, Math.ceil((duration * 1000 - phaseTime) / 1000));\n          countdownRef.current.textContent = countdown;\n        }\n        requestAnimationFrame(animate);\n      };\n      const animationId = requestAnimationFrame(animate);\n      return () => {\n        cancelAnimationFrame(animationId);\n      };\n    } else {\n      // Reset the box size and dot position when not running\n      if (boxRef.current) {\n        boxRef.current.style.width = '300px';\n        boxRef.current.style.height = '300px';\n      }\n      if (dotRef.current) {\n        dotRef.current.style.left = '-13px';\n        dotRef.current.style.top = '-13px';\n      }\n      // Clear the phase text and countdown\n      if (phaseTextRef.current) {\n        phaseTextRef.current.textContent = '';\n      }\n      if (countdownRef.current) {\n        countdownRef.current.textContent = '';\n      }\n    }\n  }, [isRunning, duration, theme, startTime, isReady]);\n  const interpolateColor = (color1, color2, factor) => {\n    const r1 = parseInt(color1.slice(1, 3), 16);\n    const g1 = parseInt(color1.slice(3, 5), 16);\n    const b1 = parseInt(color1.slice(5, 7), 16);\n    const r2 = parseInt(color2.slice(1, 3), 16);\n    const g2 = parseInt(color2.slice(3, 5), 16);\n    const b2 = parseInt(color2.slice(5, 7), 16);\n    const r = Math.round(r1 + factor * (r2 - r1));\n    const g = Math.round(g1 + factor * (g2 - g1));\n    const b = Math.round(b1 + factor * (b2 - b1));\n    return `rgb(${r}, ${g}, ${b})`;\n  };\n  const boxStyle = {\n    width: '100%',\n    height: '100%',\n    border: '2px solid #000',\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center'\n  };\n  const dotStyle = {\n    width: '26px',\n    height: '26px',\n    borderRadius: '50%',\n    position: 'absolute',\n    top: '-13px',\n    right: '-13px',\n    backgroundColor: getColors().color1 // Set initial color\n  };\n  const phaseTextStyle = {\n    fontSize: '24px',\n    opacity: 1,\n    transition: 'opacity 0.3s ease-in-out',\n    position: 'absolute',\n    top: '40%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    width: '100%',\n    textAlign: 'center'\n  };\n  const countdownStyle = {\n    fontSize: '18px',\n    color: 'rgba(0, 0, 0, 0.5)',\n    position: 'absolute',\n    bottom: '40%',\n    left: '50%',\n    transform: 'translateX(-50%)',\n    width: '100%',\n    textAlign: 'center'\n  };\n  return /*#__PURE__*/_jsxDEV(MUIBox, {\n    sx: {\n      position: 'relative',\n      width: 300,\n      height: 300,\n      margin: '20px auto'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: boxRef,\n      style: boxStyle,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        ref: dotRef,\n        style: dotStyle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: phaseTextRef,\n        style: phaseTextStyle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: countdownRef,\n        style: countdownStyle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 234,\n    columnNumber: 5\n  }, this);\n};\n_s(Box, \"aePvjOhVwqbj0NCVPtqNM0nneT0=\");\n_c = Box;\nexport default Box;\nvar _c;\n$RefreshReg$(_c, \"Box\");","map":{"version":3,"names":["React","useEffect","useRef","Box","MUIBox","jsxDEV","_jsxDEV","isRunning","duration","theme","startTime","isReady","_s","boxRef","dotRef","phaseTextRef","countdownRef","phases","points","x","y","getColors","color1","color2","current","textContent","style","borderColor","backgroundColor","animate","timestamp","elapsedTime","totalCycleDuration","cycleTime","phaseIndex","Math","floor","phaseTime","safePhaseIndex","startPoint","endPoint","console","error","progress","pauseDuration","adjustedProgress","left","top","originalSize","minSize","currentSize","width","height","scale","color","colorProgress","interpolateColor","countdown","max","ceil","requestAnimationFrame","animationId","cancelAnimationFrame","factor","r1","parseInt","slice","g1","b1","r2","g2","b2","r","round","g","b","boxStyle","border","position","transform","display","flexDirection","justifyContent","alignItems","dotStyle","borderRadius","right","phaseTextStyle","fontSize","opacity","transition","textAlign","countdownStyle","bottom","sx","margin","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/bc/Documents/box/src/components/Box.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { Box as MUIBox } from '@mui/material';\n\nconst Box = ({ isRunning, duration, theme, startTime, isReady }) => {\n  const boxRef = useRef(null);\n  const dotRef = useRef(null);\n  const phaseTextRef = useRef(null);\n  const countdownRef = useRef(null);\n\n  const phases = ['Exhale', 'Hold', 'Inhale', 'Hold'];\n  const points = [\n    { x: 300, y: 0 },   // A: Upper right\n    { x: 300, y: 300 }, // B: Lower right\n    { x: 0, y: 300 },   // C: Lower left\n    { x: 0, y: 0 }      // D: Upper left\n  ];\n\n  const getColors = () => {\n    switch (theme) {\n      case 'green-purple':\n        return { color1: '#9C27B0', color2: '#4CAF50' };\n      case 'red-yellow':\n        return { color1: '#F44336', color2: '#FFEB3B' };\n      default:\n        return { color1: '#2196F3', color2: '#FF9800' };\n    }\n  };\n\n  useEffect(() => {\n    if (isReady) {\n      if (phaseTextRef.current) {\n        phaseTextRef.current.textContent = 'Ready to exhale';\n      }\n      if (boxRef.current) {\n        boxRef.current.style.borderColor = getColors().color1;\n      }\n      if (dotRef.current) {\n        dotRef.current.style.backgroundColor = getColors().color1;\n      }\n    } else if (isRunning && startTime) {\n      const animate = (timestamp) => {\n        const elapsedTime = timestamp - startTime;\n        const totalCycleDuration = duration * 4 * 1000;\n        const cycleTime = elapsedTime % totalCycleDuration;\n        const phaseIndex = Math.floor(cycleTime / (duration * 1000));\n        const phaseTime = cycleTime % (duration * 1000);\n\n        // Ensure phaseIndex is within bounds\n        const safePhaseIndex = phaseIndex % 4;\n\n        // Calculate position\n        const startPoint = points[safePhaseIndex];\n        const endPoint = points[(safePhaseIndex + 1) % 4];\n\n        if (!startPoint || !endPoint) {\n          console.error('Invalid points:', startPoint, endPoint);\n          return;\n        }\n\n        const progress = phaseTime / (duration * 1000);\n\n        // Apply 0.2-second pause at each point\n        const pauseDuration = 200; // 0.2 seconds in milliseconds\n        let adjustedProgress = progress;\n        if (progress < pauseDuration / (duration * 1000)) {\n          adjustedProgress = 0;\n        } else if (progress > 1 - pauseDuration / (duration * 1000)) {\n          adjustedProgress = 1;\n        } else {\n          adjustedProgress = (progress - pauseDuration / (duration * 1000)) / (1 - 2 * pauseDuration / (duration * 1000));\n        }\n\n        const x = startPoint.x + (endPoint.x - startPoint.x) * adjustedProgress;\n        const y = startPoint.y + (endPoint.y - startPoint.y) * adjustedProgress;\n\n        if (dotRef.current) {\n          dotRef.current.style.left = `${x - 13}px`;\n          dotRef.current.style.top = `${y - 13}px`;\n        }\n\n        // Box size animation\n        const originalSize = 300;\n        const minSize = originalSize * 0.75; // 25% reduction\n        let currentSize;\n\n        if (safePhaseIndex === 0) { // Exhale\n          currentSize = originalSize - (originalSize - minSize) * adjustedProgress;\n        } else if (safePhaseIndex === 1) { // Hold after Exhale\n          currentSize = minSize;\n        } else if (safePhaseIndex === 2) { // Inhale\n          currentSize = minSize + (originalSize - minSize) * adjustedProgress;\n        } else { // Hold after Inhale\n          currentSize = originalSize;\n        }\n\n        if (boxRef.current) {\n          boxRef.current.style.width = `${currentSize}px`;\n          boxRef.current.style.height = `${currentSize}px`;\n        }\n\n        // Adjust dot position based on new box size\n        const scale = currentSize / originalSize;\n        if (dotRef.current) {\n          dotRef.current.style.left = `${(x * scale) - 13}px`;\n          dotRef.current.style.top = `${(y * scale) - 13}px`;\n        }\n\n        // Color transition\n        const { color1, color2 } = getColors();\n        let color;\n        if (safePhaseIndex === 0) {\n          // Exhale: transition from color1 to color2\n          const colorProgress = adjustedProgress;\n          color = interpolateColor(color1, color2, colorProgress);\n        } else if (safePhaseIndex === 1 || safePhaseIndex === 3) {\n          // Hold phases: use color2 (calm color)\n          color = color2;\n        } else if (safePhaseIndex === 2) {\n          // Inhale: transition from color2 to color1\n          const colorProgress = adjustedProgress;\n          color = interpolateColor(color2, color1, colorProgress);\n        }\n\n        if (boxRef.current) {\n          boxRef.current.style.borderColor = color;\n        }\n        if (dotRef.current) {\n          dotRef.current.style.backgroundColor = color;\n        }\n        if (phaseTextRef.current) {\n          phaseTextRef.current.style.color = color;\n        }\n\n        // Update phase text\n        if (phaseTextRef.current) {\n          phaseTextRef.current.textContent = phases[safePhaseIndex];\n        }\n\n        // Update countdown\n        if (countdownRef.current) {\n          const countdown = Math.max(0, Math.ceil((duration * 1000 - phaseTime) / 1000));\n          countdownRef.current.textContent = countdown;\n        }\n\n        requestAnimationFrame(animate);\n      };\n\n      const animationId = requestAnimationFrame(animate);\n\n      return () => {\n        cancelAnimationFrame(animationId);\n      };\n    } else {\n      // Reset the box size and dot position when not running\n      if (boxRef.current) {\n        boxRef.current.style.width = '300px';\n        boxRef.current.style.height = '300px';\n      }\n      if (dotRef.current) {\n        dotRef.current.style.left = '-13px';\n        dotRef.current.style.top = '-13px';\n      }\n      // Clear the phase text and countdown\n      if (phaseTextRef.current) {\n        phaseTextRef.current.textContent = '';\n      }\n      if (countdownRef.current) {\n        countdownRef.current.textContent = '';\n      }\n    }\n  }, [isRunning, duration, theme, startTime, isReady]);\n\n  const interpolateColor = (color1, color2, factor) => {\n    const r1 = parseInt(color1.slice(1, 3), 16);\n    const g1 = parseInt(color1.slice(3, 5), 16);\n    const b1 = parseInt(color1.slice(5, 7), 16);\n    const r2 = parseInt(color2.slice(1, 3), 16);\n    const g2 = parseInt(color2.slice(3, 5), 16);\n    const b2 = parseInt(color2.slice(5, 7), 16);\n    const r = Math.round(r1 + factor * (r2 - r1));\n    const g = Math.round(g1 + factor * (g2 - g1));\n    const b = Math.round(b1 + factor * (b2 - b1));\n    return `rgb(${r}, ${g}, ${b})`;\n  };\n\n  const boxStyle = {\n    width: '100%',\n    height: '100%',\n    border: '2px solid #000',\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n  };\n\n  const dotStyle = {\n    width: '26px',\n    height: '26px',\n    borderRadius: '50%',\n    position: 'absolute',\n    top: '-13px',\n    right: '-13px',\n    backgroundColor: getColors().color1, // Set initial color\n  };\n\n  const phaseTextStyle = {\n    fontSize: '24px',\n    opacity: 1,\n    transition: 'opacity 0.3s ease-in-out',\n    position: 'absolute',\n    top: '40%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    width: '100%',\n    textAlign: 'center',\n  };\n\n  const countdownStyle = {\n    fontSize: '18px',\n    color: 'rgba(0, 0, 0, 0.5)',\n    position: 'absolute',\n    bottom: '40%',\n    left: '50%',\n    transform: 'translateX(-50%)',\n    width: '100%',\n    textAlign: 'center',\n  };\n\n  return (\n    <MUIBox sx={{ position: 'relative', width: 300, height: 300, margin: '20px auto' }}>\n      <div ref={boxRef} style={boxStyle}>\n        <div ref={dotRef} style={dotStyle}></div>\n        <div ref={phaseTextRef} style={phaseTextStyle}></div>\n        <div ref={countdownRef} style={countdownStyle}></div>\n      </div>\n    </MUIBox>\n  );\n};\n\nexport default Box;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}