{"ast":null,"code":"var _jsxFileName = \"/Users/bc/Documents/box/src/components/Box.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { Box as MUIBox, Typography } from '@mui/material';\nimport { styled, keyframes } from '@mui/system';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst pulse = keyframes`\n  0% {\n    transform: scale(1);\n    opacity: 1;\n  }\n  50% {\n    transform: scale(1.2);\n    opacity: 0.7;\n  }\n  100% {\n    transform: scale(1);\n    opacity: 1;\n  }\n`;\nconst RelaxingText = styled(Typography)(({\n  theme\n}) => ({\n  fontFamily: \"'Playfair Display', serif\",\n  fontSize: '32px',\n  fontStyle: 'italic',\n  opacity: 0,\n  transition: 'opacity 0.5s ease-in-out',\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: '100%',\n  textAlign: 'center',\n  color: 'grey',\n  lineHeight: 1.2\n}));\n_c = RelaxingText;\nconst PulsatingDot = styled('div')(({\n  theme\n}) => ({\n  width: '26px',\n  height: '26px',\n  borderRadius: '50%',\n  position: 'absolute',\n  animation: `${pulse} 2s ease-in-out infinite`\n}));\n_c2 = PulsatingDot;\nconst Box = ({\n  isRunning,\n  duration,\n  theme,\n  startTime,\n  isReady\n}) => {\n  _s();\n  const boxRef = useRef(null);\n  const dotRef = useRef(null);\n  const phaseTextRef = useRef(null);\n  const countdownRef = useRef(null);\n  const readyTextRef = useRef(null);\n  const phases = ['Exhale', 'Hold', 'Inhale', 'Hold'];\n  const points = [{\n    x: 300,\n    y: 0\n  },\n  // A: Upper right\n  {\n    x: 300,\n    y: 300\n  },\n  // B: Lower right\n  {\n    x: 0,\n    y: 300\n  },\n  // C: Lower left\n  {\n    x: 0,\n    y: 0\n  } // D: Upper left\n  ];\n  const getColors = () => {\n    switch (theme) {\n      case 'green-purple':\n        return {\n          color1: '#4CAF50',\n          color2: '#9C27B0'\n        };\n      case 'red-yellow':\n        return {\n          color1: '#FFEB3B',\n          color2: '#F44336'\n        };\n      default:\n        return {\n          color1: '#FF9800',\n          color2: '#2196F3'\n        };\n      // Orange to Blue\n    }\n  };\n  useEffect(() => {\n    if (isReady) {\n      if (readyTextRef.current) {\n        readyTextRef.current.style.opacity = '1';\n        setTimeout(() => {\n          if (readyTextRef.current) {\n            readyTextRef.current.style.opacity = '0';\n          }\n        }, 2000); // Start fading out after 2 seconds\n      }\n      if (boxRef.current) {\n        boxRef.current.style.borderColor = getColors().color1;\n      }\n      if (dotRef.current) {\n        dotRef.current.style.backgroundColor = getColors().color1;\n        dotRef.current.style.left = '287px'; // Position at Point A (300 - 13)\n        dotRef.current.style.top = '-13px';\n      }\n    } else if (isRunning && startTime) {\n      const animate = timestamp => {\n        const elapsedTime = timestamp - startTime;\n        const totalCycleDuration = duration * 4 * 1000;\n        const cycleTime = elapsedTime % totalCycleDuration;\n        const phaseIndex = Math.floor(cycleTime / (duration * 1000));\n        const phaseTime = cycleTime % (duration * 1000);\n\n        // Ensure phaseIndex is within bounds\n        const safePhaseIndex = phaseIndex % 4;\n\n        // Calculate position\n        const startPoint = points[safePhaseIndex];\n        const endPoint = points[(safePhaseIndex + 1) % 4];\n        if (!startPoint || !endPoint) {\n          console.error('Invalid points:', startPoint, endPoint);\n          return;\n        }\n        const progress = phaseTime / (duration * 1000);\n\n        // Apply 0.2-second pause at each point\n        const pauseDuration = 200; // 0.2 seconds in milliseconds\n        let adjustedProgress = progress;\n        if (progress < pauseDuration / (duration * 1000)) {\n          adjustedProgress = 0;\n        } else if (progress > 1 - pauseDuration / (duration * 1000)) {\n          adjustedProgress = 1;\n        } else {\n          adjustedProgress = (progress - pauseDuration / (duration * 1000)) / (1 - 2 * pauseDuration / (duration * 1000));\n        }\n        const x = startPoint.x + (endPoint.x - startPoint.x) * adjustedProgress;\n        const y = startPoint.y + (endPoint.y - startPoint.y) * adjustedProgress;\n        if (dotRef.current) {\n          dotRef.current.style.left = `${x - 13}px`;\n          dotRef.current.style.top = `${y - 13}px`;\n        }\n\n        // Box size animation\n        const originalSize = 300;\n        const minSize = originalSize * 0.75; // 25% reduction\n        let currentSize;\n        if (safePhaseIndex === 0) {\n          // Exhale\n          currentSize = originalSize - (originalSize - minSize) * adjustedProgress;\n        } else if (safePhaseIndex === 1) {\n          // Hold after Exhale\n          currentSize = minSize;\n        } else if (safePhaseIndex === 2) {\n          // Inhale\n          currentSize = minSize + (originalSize - minSize) * adjustedProgress;\n        } else {\n          // Hold after Inhale\n          currentSize = originalSize;\n        }\n        if (boxRef.current) {\n          boxRef.current.style.width = `${currentSize}px`;\n          boxRef.current.style.height = `${currentSize}px`;\n        }\n\n        // Adjust dot position based on new box size\n        const scale = currentSize / originalSize;\n        if (dotRef.current) {\n          dotRef.current.style.left = `${x * scale - 13}px`;\n          dotRef.current.style.top = `${y * scale - 13}px`;\n        }\n\n        // Color transition\n        const {\n          color1,\n          color2\n        } = getColors();\n        let color;\n        if (safePhaseIndex === 0) {\n          // Exhale: transition from Orange to Blue\n          color = interpolateColor(color1, color2, adjustedProgress);\n        } else if (safePhaseIndex === 1) {\n          // Hold after Exhale: remain Blue\n          color = color2;\n        } else if (safePhaseIndex === 2) {\n          // Inhale: transition from Blue to Orange\n          color = interpolateColor(color2, color1, adjustedProgress);\n        } else {\n          // Hold after Inhale: remain Orange\n          color = color1;\n        }\n        if (boxRef.current) {\n          boxRef.current.style.borderColor = color;\n        }\n        if (dotRef.current) {\n          dotRef.current.style.backgroundColor = color;\n        }\n        if (phaseTextRef.current) {\n          phaseTextRef.current.style.color = color;\n        }\n\n        // Update phase text\n        if (phaseTextRef.current) {\n          phaseTextRef.current.textContent = phases[safePhaseIndex];\n        }\n\n        // Update countdown\n        if (countdownRef.current) {\n          const countdown = Math.max(0, Math.ceil((duration * 1000 - phaseTime) / 1000));\n          countdownRef.current.textContent = countdown;\n        }\n        requestAnimationFrame(animate);\n      };\n      const animationId = requestAnimationFrame(animate);\n      return () => {\n        cancelAnimationFrame(animationId);\n      };\n    } else {\n      // Reset the box size and dot position when not running\n      if (boxRef.current) {\n        boxRef.current.style.width = '300px';\n        boxRef.current.style.height = '300px';\n      }\n      if (dotRef.current) {\n        dotRef.current.style.left = '287px'; // Position at Point A (300 - 13)\n        dotRef.current.style.top = '-13px';\n        dotRef.current.style.backgroundColor = getColors().color1;\n      }\n      // Clear the phase text and countdown\n      if (phaseTextRef.current) {\n        phaseTextRef.current.textContent = '';\n      }\n      if (countdownRef.current) {\n        countdownRef.current.textContent = '';\n      }\n    }\n  }, [isRunning, duration, theme, startTime, isReady]);\n  const interpolateColor = (color1, color2, factor) => {\n    const r1 = parseInt(color1.slice(1, 3), 16);\n    const g1 = parseInt(color1.slice(3, 5), 16);\n    const b1 = parseInt(color1.slice(5, 7), 16);\n    const r2 = parseInt(color2.slice(1, 3), 16);\n    const g2 = parseInt(color2.slice(3, 5), 16);\n    const b2 = parseInt(color2.slice(5, 7), 16);\n    const r = Math.round(r1 + factor * (r2 - r1));\n    const g = Math.round(g1 + factor * (g2 - g1));\n    const b = Math.round(b1 + factor * (b2 - b1));\n    return `rgb(${r}, ${g}, ${b})`;\n  };\n  const boxStyle = {\n    width: '100%',\n    height: '100%',\n    border: '2px solid #000',\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center'\n  };\n  const phaseTextStyle = {\n    fontSize: '24px',\n    opacity: 1,\n    transition: 'opacity 0.3s ease-in-out',\n    position: 'absolute',\n    top: '40%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    width: '100%',\n    textAlign: 'center'\n  };\n  const countdownStyle = {\n    fontSize: '18px',\n    color: 'rgba(0, 0, 0, 0.5)',\n    position: 'absolute',\n    bottom: '40%',\n    left: '50%',\n    transform: 'translateX(-50%)',\n    width: '100%',\n    textAlign: 'center'\n  };\n  return /*#__PURE__*/_jsxDEV(MUIBox, {\n    sx: {\n      position: 'relative',\n      width: 300,\n      height: 300,\n      margin: '20px auto'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: boxRef,\n      style: boxStyle,\n      children: [/*#__PURE__*/_jsxDEV(PulsatingDot, {\n        ref: dotRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: phaseTextRef,\n        style: phaseTextStyle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: countdownRef,\n        style: countdownStyle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RelaxingText, {\n      ref: readyTextRef,\n      children: [\"Ready\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 14\n      }, this), \"to\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 22\n      }, this), \"exhale\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 274,\n    columnNumber: 5\n  }, this);\n};\n_s(Box, \"ri2uZ6Baj3dJNHGPBxZJNzav8WE=\");\n_c3 = Box;\nexport default Box;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"RelaxingText\");\n$RefreshReg$(_c2, \"PulsatingDot\");\n$RefreshReg$(_c3, \"Box\");","map":{"version":3,"names":["React","useEffect","useRef","Box","MUIBox","Typography","styled","keyframes","jsxDEV","_jsxDEV","pulse","RelaxingText","theme","fontFamily","fontSize","fontStyle","opacity","transition","position","top","left","transform","width","textAlign","color","lineHeight","_c","PulsatingDot","height","borderRadius","animation","_c2","isRunning","duration","startTime","isReady","_s","boxRef","dotRef","phaseTextRef","countdownRef","readyTextRef","phases","points","x","y","getColors","color1","color2","current","style","setTimeout","borderColor","backgroundColor","animate","timestamp","elapsedTime","totalCycleDuration","cycleTime","phaseIndex","Math","floor","phaseTime","safePhaseIndex","startPoint","endPoint","console","error","progress","pauseDuration","adjustedProgress","originalSize","minSize","currentSize","scale","interpolateColor","textContent","countdown","max","ceil","requestAnimationFrame","animationId","cancelAnimationFrame","factor","r1","parseInt","slice","g1","b1","r2","g2","b2","r","round","g","b","boxStyle","border","display","flexDirection","justifyContent","alignItems","phaseTextStyle","countdownStyle","bottom","sx","margin","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c3","$RefreshReg$"],"sources":["/Users/bc/Documents/box/src/components/Box.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { Box as MUIBox, Typography } from '@mui/material';\nimport { styled, keyframes } from '@mui/system';\n\nconst pulse = keyframes`\n  0% {\n    transform: scale(1);\n    opacity: 1;\n  }\n  50% {\n    transform: scale(1.2);\n    opacity: 0.7;\n  }\n  100% {\n    transform: scale(1);\n    opacity: 1;\n  }\n`;\n\nconst RelaxingText = styled(Typography)(({ theme }) => ({\n  fontFamily: \"'Playfair Display', serif\",\n  fontSize: '32px',\n  fontStyle: 'italic',\n  opacity: 0,\n  transition: 'opacity 0.5s ease-in-out',\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: '100%',\n  textAlign: 'center',\n  color: 'grey',\n  lineHeight: 1.2,\n}));\n\nconst PulsatingDot = styled('div')(({ theme }) => ({\n  width: '26px',\n  height: '26px',\n  borderRadius: '50%',\n  position: 'absolute',\n  animation: `${pulse} 2s ease-in-out infinite`,\n}));\n\nconst Box = ({ isRunning, duration, theme, startTime, isReady }) => {\n  const boxRef = useRef(null);\n  const dotRef = useRef(null);\n  const phaseTextRef = useRef(null);\n  const countdownRef = useRef(null);\n  const readyTextRef = useRef(null);\n\n  const phases = ['Exhale', 'Hold', 'Inhale', 'Hold'];\n  const points = [\n    { x: 300, y: 0 },   // A: Upper right\n    { x: 300, y: 300 }, // B: Lower right\n    { x: 0, y: 300 },   // C: Lower left\n    { x: 0, y: 0 }      // D: Upper left\n  ];\n\n  const getColors = () => {\n    switch (theme) {\n      case 'green-purple':\n        return { color1: '#4CAF50', color2: '#9C27B0' };\n      case 'red-yellow':\n        return { color1: '#FFEB3B', color2: '#F44336' };\n      default:\n        return { color1: '#FF9800', color2: '#2196F3' }; // Orange to Blue\n    }\n  };\n\n  useEffect(() => {\n    if (isReady) {\n      if (readyTextRef.current) {\n        readyTextRef.current.style.opacity = '1';\n        setTimeout(() => {\n          if (readyTextRef.current) {\n            readyTextRef.current.style.opacity = '0';\n          }\n        }, 2000); // Start fading out after 2 seconds\n      }\n      if (boxRef.current) {\n        boxRef.current.style.borderColor = getColors().color1;\n      }\n      if (dotRef.current) {\n        dotRef.current.style.backgroundColor = getColors().color1;\n        dotRef.current.style.left = '287px'; // Position at Point A (300 - 13)\n        dotRef.current.style.top = '-13px';\n      }\n    } else if (isRunning && startTime) {\n      const animate = (timestamp) => {\n        const elapsedTime = timestamp - startTime;\n        const totalCycleDuration = duration * 4 * 1000;\n        const cycleTime = elapsedTime % totalCycleDuration;\n        const phaseIndex = Math.floor(cycleTime / (duration * 1000));\n        const phaseTime = cycleTime % (duration * 1000);\n\n        // Ensure phaseIndex is within bounds\n        const safePhaseIndex = phaseIndex % 4;\n\n        // Calculate position\n        const startPoint = points[safePhaseIndex];\n        const endPoint = points[(safePhaseIndex + 1) % 4];\n\n        if (!startPoint || !endPoint) {\n          console.error('Invalid points:', startPoint, endPoint);\n          return;\n        }\n\n        const progress = phaseTime / (duration * 1000);\n\n        // Apply 0.2-second pause at each point\n        const pauseDuration = 200; // 0.2 seconds in milliseconds\n        let adjustedProgress = progress;\n        if (progress < pauseDuration / (duration * 1000)) {\n          adjustedProgress = 0;\n        } else if (progress > 1 - pauseDuration / (duration * 1000)) {\n          adjustedProgress = 1;\n        } else {\n          adjustedProgress = (progress - pauseDuration / (duration * 1000)) / (1 - 2 * pauseDuration / (duration * 1000));\n        }\n\n        const x = startPoint.x + (endPoint.x - startPoint.x) * adjustedProgress;\n        const y = startPoint.y + (endPoint.y - startPoint.y) * adjustedProgress;\n\n        if (dotRef.current) {\n          dotRef.current.style.left = `${x - 13}px`;\n          dotRef.current.style.top = `${y - 13}px`;\n        }\n\n        // Box size animation\n        const originalSize = 300;\n        const minSize = originalSize * 0.75; // 25% reduction\n        let currentSize;\n\n        if (safePhaseIndex === 0) { // Exhale\n          currentSize = originalSize - (originalSize - minSize) * adjustedProgress;\n        } else if (safePhaseIndex === 1) { // Hold after Exhale\n          currentSize = minSize;\n        } else if (safePhaseIndex === 2) { // Inhale\n          currentSize = minSize + (originalSize - minSize) * adjustedProgress;\n        } else { // Hold after Inhale\n          currentSize = originalSize;\n        }\n\n        if (boxRef.current) {\n          boxRef.current.style.width = `${currentSize}px`;\n          boxRef.current.style.height = `${currentSize}px`;\n        }\n\n        // Adjust dot position based on new box size\n        const scale = currentSize / originalSize;\n        if (dotRef.current) {\n          dotRef.current.style.left = `${(x * scale) - 13}px`;\n          dotRef.current.style.top = `${(y * scale) - 13}px`;\n        }\n\n        // Color transition\n        const { color1, color2 } = getColors();\n        let color;\n        if (safePhaseIndex === 0) {\n          // Exhale: transition from Orange to Blue\n          color = interpolateColor(color1, color2, adjustedProgress);\n        } else if (safePhaseIndex === 1) {\n          // Hold after Exhale: remain Blue\n          color = color2;\n        } else if (safePhaseIndex === 2) {\n          // Inhale: transition from Blue to Orange\n          color = interpolateColor(color2, color1, adjustedProgress);\n        } else {\n          // Hold after Inhale: remain Orange\n          color = color1;\n        }\n\n        if (boxRef.current) {\n          boxRef.current.style.borderColor = color;\n        }\n        if (dotRef.current) {\n          dotRef.current.style.backgroundColor = color;\n        }\n        if (phaseTextRef.current) {\n          phaseTextRef.current.style.color = color;\n        }\n\n        // Update phase text\n        if (phaseTextRef.current) {\n          phaseTextRef.current.textContent = phases[safePhaseIndex];\n        }\n\n        // Update countdown\n        if (countdownRef.current) {\n          const countdown = Math.max(0, Math.ceil((duration * 1000 - phaseTime) / 1000));\n          countdownRef.current.textContent = countdown;\n        }\n\n        requestAnimationFrame(animate);\n      };\n\n      const animationId = requestAnimationFrame(animate);\n\n      return () => {\n        cancelAnimationFrame(animationId);\n      };\n    } else {\n      // Reset the box size and dot position when not running\n      if (boxRef.current) {\n        boxRef.current.style.width = '300px';\n        boxRef.current.style.height = '300px';\n      }\n      if (dotRef.current) {\n        dotRef.current.style.left = '287px'; // Position at Point A (300 - 13)\n        dotRef.current.style.top = '-13px';\n        dotRef.current.style.backgroundColor = getColors().color1;\n      }\n      // Clear the phase text and countdown\n      if (phaseTextRef.current) {\n        phaseTextRef.current.textContent = '';\n      }\n      if (countdownRef.current) {\n        countdownRef.current.textContent = '';\n      }\n    }\n  }, [isRunning, duration, theme, startTime, isReady]);\n\n  const interpolateColor = (color1, color2, factor) => {\n    const r1 = parseInt(color1.slice(1, 3), 16);\n    const g1 = parseInt(color1.slice(3, 5), 16);\n    const b1 = parseInt(color1.slice(5, 7), 16);\n    const r2 = parseInt(color2.slice(1, 3), 16);\n    const g2 = parseInt(color2.slice(3, 5), 16);\n    const b2 = parseInt(color2.slice(5, 7), 16);\n    const r = Math.round(r1 + factor * (r2 - r1));\n    const g = Math.round(g1 + factor * (g2 - g1));\n    const b = Math.round(b1 + factor * (b2 - b1));\n    return `rgb(${r}, ${g}, ${b})`;\n  };\n\n  const boxStyle = {\n    width: '100%',\n    height: '100%',\n    border: '2px solid #000',\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n  };\n\n  const phaseTextStyle = {\n    fontSize: '24px',\n    opacity: 1,\n    transition: 'opacity 0.3s ease-in-out',\n    position: 'absolute',\n    top: '40%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    width: '100%',\n    textAlign: 'center',\n  };\n\n  const countdownStyle = {\n    fontSize: '18px',\n    color: 'rgba(0, 0, 0, 0.5)',\n    position: 'absolute',\n    bottom: '40%',\n    left: '50%',\n    transform: 'translateX(-50%)',\n    width: '100%',\n    textAlign: 'center',\n  };\n\n  return (\n    <MUIBox sx={{ position: 'relative', width: 300, height: 300, margin: '20px auto' }}>\n      <div ref={boxRef} style={boxStyle}>\n        <PulsatingDot ref={dotRef} />\n        <div ref={phaseTextRef} style={phaseTextStyle}></div>\n        <div ref={countdownRef} style={countdownStyle}></div>\n      </div>\n      <RelaxingText ref={readyTextRef}>\n        Ready<br />to<br />exhale\n      </RelaxingText>\n    </MUIBox>\n  );\n};\n\nexport default Box;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}