{"ast":null,"code":"var _jsxFileName = \"/Users/bc/Documents/box/src/components/BoxBreathing.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport Controls from './Controls';\nimport Box from './Box';\nimport Summary from './Summary';\n// import './BoxBreathing.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BoxBreathing = () => {\n  _s();\n  const [isRunning, setIsRunning] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const [isMuted, setIsMuted] = useState(false);\n  const [duration, setDuration] = useState(4);\n  const [theme, setTheme] = useState('default');\n  const [music, setMusic] = useState('none');\n  const [breathCount, setBreathCount] = useState(0);\n  const [showSummary, setShowSummary] = useState(false);\n  const [totalTime, setTotalTime] = useState(0);\n  const animationRef = useRef(null);\n  const startTimeRef = useRef(null);\n  const pauseTimeRef = useRef(null);\n  useEffect(() => {\n    if (isRunning && !isPaused) {\n      animationRef.current = requestAnimationFrame(animate);\n    } else {\n      cancelAnimationFrame(animationRef.current);\n    }\n    return () => cancelAnimationFrame(animationRef.current);\n  }, [isRunning, isPaused]);\n  const animate = timestamp => {\n    // Implement animation logic here\n    // ...\n\n    animationRef.current = requestAnimationFrame(animate);\n  };\n  const handleStart = () => {\n    if (isPaused) {\n      startTimeRef.current = performance.now() - pauseTimeRef.current;\n      setIsPaused(false);\n    } else {\n      startTimeRef.current = performance.now();\n      setBreathCount(0);\n    }\n    setIsRunning(true);\n  };\n  const handlePause = () => {\n    pauseTimeRef.current = performance.now() - startTimeRef.current;\n    setIsPaused(true);\n  };\n  const handleReset = () => {\n    setIsRunning(false);\n    setIsPaused(false);\n    setBreathCount(0);\n    setTotalTime(Math.floor((performance.now() - startTimeRef.current) / 1000));\n    setShowSummary(true);\n  };\n  const handleMute = () => {\n    setIsMuted(!isMuted);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"box-breathing\",\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      isRunning: isRunning,\n      duration: duration,\n      theme: theme\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Controls, {\n      isRunning: isRunning,\n      isPaused: isPaused,\n      isMuted: isMuted,\n      onStart: handleStart,\n      onPause: handlePause,\n      onReset: handleReset,\n      onMute: handleMute,\n      duration: duration,\n      setDuration: setDuration,\n      theme: theme,\n      music: music,\n      setMusic: setMusic\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), showSummary && /*#__PURE__*/_jsxDEV(Summary, {\n      totalTime: totalTime,\n      breathCount: breathCount,\n      onClose: () => setShowSummary(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s(BoxBreathing, \"z6OQ9Thnsmo331lOLa5DxEANNLY=\");\n_c = BoxBreathing;\nexport default BoxBreathing;\nvar _c;\n$RefreshReg$(_c, \"BoxBreathing\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Controls","Box","Summary","jsxDEV","_jsxDEV","BoxBreathing","_s","isRunning","setIsRunning","isPaused","setIsPaused","isMuted","setIsMuted","duration","setDuration","theme","setTheme","music","setMusic","breathCount","setBreathCount","showSummary","setShowSummary","totalTime","setTotalTime","animationRef","startTimeRef","pauseTimeRef","current","requestAnimationFrame","animate","cancelAnimationFrame","timestamp","handleStart","performance","now","handlePause","handleReset","Math","floor","handleMute","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onStart","onPause","onReset","onMute","onClose","_c","$RefreshReg$"],"sources":["/Users/bc/Documents/box/src/components/BoxBreathing.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport Controls from './Controls';\nimport Box from './Box';\nimport Summary from './Summary';\n// import './BoxBreathing.css';\n\nconst BoxBreathing = () => {\n  const [isRunning, setIsRunning] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const [isMuted, setIsMuted] = useState(false);\n  const [duration, setDuration] = useState(4);\n  const [theme, setTheme] = useState('default');\n  const [music, setMusic] = useState('none');\n  const [breathCount, setBreathCount] = useState(0);\n  const [showSummary, setShowSummary] = useState(false);\n  const [totalTime, setTotalTime] = useState(0);\n\n  const animationRef = useRef(null);\n  const startTimeRef = useRef(null);\n  const pauseTimeRef = useRef(null);\n\n  useEffect(() => {\n    if (isRunning && !isPaused) {\n      animationRef.current = requestAnimationFrame(animate);\n    } else {\n      cancelAnimationFrame(animationRef.current);\n    }\n\n    return () => cancelAnimationFrame(animationRef.current);\n  }, [isRunning, isPaused]);\n\n  const animate = (timestamp) => {\n    // Implement animation logic here\n    // ...\n\n    animationRef.current = requestAnimationFrame(animate);\n  };\n\n  const handleStart = () => {\n    if (isPaused) {\n      startTimeRef.current = performance.now() - pauseTimeRef.current;\n      setIsPaused(false);\n    } else {\n      startTimeRef.current = performance.now();\n      setBreathCount(0);\n    }\n    setIsRunning(true);\n  };\n\n  const handlePause = () => {\n    pauseTimeRef.current = performance.now() - startTimeRef.current;\n    setIsPaused(true);\n  };\n\n  const handleReset = () => {\n    setIsRunning(false);\n    setIsPaused(false);\n    setBreathCount(0);\n    setTotalTime(Math.floor((performance.now() - startTimeRef.current) / 1000));\n    setShowSummary(true);\n  };\n\n  const handleMute = () => {\n    setIsMuted(!isMuted);\n  };\n\n  return (\n    <div className=\"box-breathing\">\n      <Box\n        isRunning={isRunning}\n        duration={duration}\n        theme={theme}\n      />\n      <Controls\n        isRunning={isRunning}\n        isPaused={isPaused}\n        isMuted={isMuted}\n        onStart={handleStart}\n        onPause={handlePause}\n        onReset={handleReset}\n        onMute={handleMute}\n        duration={duration}\n        setDuration={setDuration}\n        theme={theme}\n        music={music}\n        setMusic={setMusic}\n      />\n      {showSummary && (\n        <Summary\n          totalTime={totalTime}\n          breathCount={breathCount}\n          onClose={() => setShowSummary(false)}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default BoxBreathing;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}